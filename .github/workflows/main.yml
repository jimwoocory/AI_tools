name: Python package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
        # 检出代码到当前工作目录

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
        # 设置指定版本的Python环境

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
        # 缓存pip依赖，提高依赖安装速度

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest==7.4.0 pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip list --verbose
        # 安装项目所需的依赖，包括代码检查和测试工具

      - name: Check Python environment
        run: |
          python --version
          which python
          python -c "import sys; print(sys.path)"
        # 检查Python环境信息

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        # 使用flake8进行代码检查

      - name: Verify pytest installation
        run: |
          pytest --version
          pytest --fixtures | head -n 20
        # 验证pytest是否正确安装

      - name: Debug pytest configuration
        run: |
          pytest --trace-config
          pytest --collect-only -q
        # 调试pytest配置

      - name: Check project structure
        run: |
          echo "Project structure:"
          tree -a
          echo "Current directory:"
          pwd
        # 打印项目结构和当前目录

      - name: Check Python module search path
        run: |
          echo "Python module search path:"
          python -c "import sys; print('\n'.join(sys.path))"
        # 打印Python模块搜索路径

      - name: Check pytest configuration files
        run: |
          echo "Pytest configuration files:"
          find . -name "pytest.ini" -o -name "pyproject.toml" -o -name "tox.ini"
          if [ -f "pytest.ini" ]; then
            echo "pytest.ini contents:"
            cat pytest.ini
          fi
          if [ -f "pyproject.toml" ]; then
            echo "pyproject.toml contents:"
            cat pyproject.toml
          fi
        # 查找并打印pytest配置文件内容

      - name: Check for test files
        run: |
          echo "Test files found:"
          find . -name "test_*.py" -o -name "*_test.py"
          if [ -z "$(find . -name "test_*.py" -o -name "*_test.py")" ]; then
            echo "WARNING: No test files found!"
          else
            echo "Test files exist. Proceeding..."
          fi
        # 查找测试文件并进行提示

      - name: Check test file contents
        run: |
          if [ -n "$(find . -name "test_*.py" -o -name "*_test.py")" ]; then
            echo "Test file contents:"
            for file in $(find . -name "test_*.py" -o -name "*_test.py"); do
              echo "--- $file ---"
              cat $file
              echo "-------------"
            done
          fi
        # 打印测试文件内容

      - name: Attempt to run specific test file (if exists)
        continue-on-error: true
        run: |
          if [ -n "$(find . -name "test_*.py" -o -name "*_test.py" | head -n 1)" ]; then
            TEST_FILE=$(find . -name "test_*.py" -o -name "*_test.py" | head -n 1)
            echo "Attempting to run specific test file: $TEST_FILE"
            pytest $TEST_FILE -vv -s
          else
            echo "No test files found to run individually."
          fi
        # 尝试运行找到的第一个测试文件

      - name: Run minimal test suite
        run: |
          echo "Creating minimal test file..."
          mkdir -p tests
          echo "def test_sanity(): assert True" > tests/test_sanity.py
          pytest tests/test_sanity.py -vv
        # 创建并运行一个最小的测试用例

      - name: Test with pytest (step-by-step)
        env:
          PYTEST_ADDOPTS: "--verbose --capture=no"
        run: |
          echo "Running pytest with minimal configuration..."
          pytest -q -x --maxfail=1
          echo "If we reached here, all tests passed. Now running with coverage..."
          pytest --cov=./ --cov-report=xml -vv --durations=0
        # 逐步运行pytest并生成覆盖率报告

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: true
          path_to_write_report: ./codecov_report.txt
          verbose: true
        # 将覆盖率报告上传到Codecov

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3
        # 检出代码到当前工作目录

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
        # 设置Python 3.10环境

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
        # 安装项目发布所需的依赖

      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*
        # 构建并发布项目到PyPI
